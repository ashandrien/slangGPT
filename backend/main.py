from fastapi import FastAPI
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import spacy
from slang import convert_to_philly_slang
from slang import reload_philly_slang, PHILLY_SLANG
import os


app = FastAPI(title="phillygpt-backend")

# Allow configuring allowed origins via environment variable for easy local
# adjustments without changing code. Provide a comma-separated list, e.g.
# ALLOWED_ORIGINS="http://localhost:5173,http://127.0.0.1:5173"
env_allowed = os.getenv("ALLOWED_ORIGINS")
if env_allowed:
    allowed_origins = [o.strip() for o in env_allowed.split(",") if o.strip()]
else:
    # Default dev-safe origins
    allowed_origins = [
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        "http://localhost:5178",
        "http://127.0.0.1:5178",
    ]

app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


class ChatRequest(BaseModel):
    message: str


class ChatResponse(BaseModel):
    reply: str
    meta: dict


class SlangRequest(BaseModel):
    text: str


class SlangResponse(BaseModel):
    converted: str


@app.on_event("startup")
def load_spacy_model():
    # Uses en_core_web_sm by default. Install with: python -m spacy download en_core_web_sm
    global nlp
    try:
        nlp = spacy.load("en_core_web_sm")
    except Exception:
        # Fail fast with helpful message if model not installed
        raise RuntimeError(
            "spaCy model 'en_core_web_sm' not found. Run: python -m spacy download en_core_web_sm"
        )


@app.post("/chat", response_model=ChatResponse)
def chat(req: ChatRequest):
    doc = nlp(req.message)

    entities = [(ent.text, ent.label_) for ent in doc.ents]
    nouns = [chunk.text for chunk in doc.noun_chunks]

    reply_lines = []
    if entities:
        reply_lines.append(f"I detected these entities: {entities}.")
    if nouns:
        reply_lines.append(f"Key noun phrases: {nouns}.")

    if not reply_lines:
        reply_lines.append("Thanks â€” I parsed your message but didn't find named entities or noun chunks to highlight.")

    reply_lines.append("(This reply is generated by a simple spaCy-based pipeline; replace with your model logic.)")

    meta = {"entity_count": len(entities), "noun_chunks_count": len(nouns)}
    return ChatResponse(reply="\n".join(reply_lines), meta=meta)


@app.post("/slang", response_model=SlangResponse)
def slang(req: SlangRequest):
    """Return a Philly-slang converted version of the input text."""
    converted = convert_to_philly_slang(nlp, req.text)
    return SlangResponse(converted=converted)


@app.post("/reload_slang")
def reload_slang():
    """Force-reload the philly_slang.json file from disk.

    This is useful in development so edits to the JSON file take effect
    immediately without restarting the server.
    """
    try:
        reload_philly_slang()
        return {"ok": True, "entries": len(PHILLY_SLANG)}
    except Exception as e:
        return {"ok": False, "error": str(e)}

